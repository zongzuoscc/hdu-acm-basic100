// Problem Description
// 据说在很久很久以前，可怜的兔子经历了人生中最大的打击——赛跑输给乌龟后，
//心中郁闷，发誓要报仇雪恨，于是躲进了杭州下沙某农业园卧薪尝胆潜心修炼，终于练成了绝技，能够毫不休息得以恒定的速度(VR m/s)一直跑。
//兔子一直想找机会好好得教训一下乌龟，以雪前耻。
// 最近正值HDU举办50周年校庆，社会各大名流齐聚下沙，兔子也趁此机会向乌龟发起挑战。虽然乌龟深知获胜希望不大，不过迫于舆论压力，只能接受挑战。
// 比赛是设在一条笔直的道路上，长度为L米，规则很简单，谁先到达终点谁就算获胜。
// 无奈乌龟自从上次获胜以后，成了名龟，被一些八卦杂志称为“动物界的刘翔”，广告不断，手头也有了不少积蓄。


//为了能够再赢兔子，乌龟不惜花下血本买了最先进的武器——“"小飞鸽"牌电动车。这辆车在有电的情况下能够以VT1 m/s的速度“飞驰”，
//可惜电池容量有限，每次充满电最多只能行驶C米的距离，以后就只能用脚来蹬了，乌龟用脚蹬时的速度为VT2 m/s。更过分的是，
//乌龟竟然在跑道上修建了很多很多（N个)的供电站，供自己给电动车充电。其中，每次充电需要花费T秒钟的时间。当然，
//乌龟经过一个充电站的时候可以选择去或不去充电。
// 比赛马上开始了，兔子和带着充满电的电动车的乌龟并列站在起跑线上。你的任务就是写个程序，判断乌龟用最佳的方案进军时，
//能不能赢了一直以恒定速度奔跑的兔子。
// Input
// 本题目包含多组测试，请处理到文件结束。每个测试包括四行：
// 第一行是一个整数L代表跑道的总长度
// 第二行包含三个整数N，C，T，分别表示充电站的个数，电动车冲满电以后能行驶的距离以及每次充电所需要的时间
// 第三行也是三个整数VR，VT1，VT2，分别表示兔子跑步的速度，乌龟开电动车的速度，乌龟脚蹬电动车的速度
// 第四行包含了N(N<=100)个整数p1,p2...pn,分别表示各个充电站离跑道起点的距离，其中0<p1<p2<...<pn<L
// 其中每个数都在32位整型范围之内。
// Output
// 当乌龟有可能赢的时候输出一行 “What a pity rabbit!"。否则输出一行"Good job,rabbit!";
// 题目数据保证不会出现乌龟和兔子同时到达的情况。
// Sample Input
// 100
// 3 20 5
// 5 8 2
// 10 40 60
// 100
// 3 60 5
// 5 8 2
// 10 40 60
// Sample Output
// Good job,rabbit!
// What a pity rabbit!

//失败了，貌似涉及到算法知识了。

// #include <iostream>
// using namespace std;
// int main()
// {
//     int L;//跑道总长度
//     cin>>L;
//     int N,C,T;//N为充电站个数，C为充满电能行驶距离，T为每次充电所需时间
//     cin>>N>>C>>T;
//     int VR,VT1,VT2;//VR为兔子跑步的速度，VT1为乌龟开电动车的速度，VT2为乌龟脚蹬电动车的速度
//     cin>>VR>>VT1>>VT2;
//     int p[N];
//     for(int i=0;i<N;i++)
//     {
//         cin>>p[i];//各个充电站离跑道起点的距离
//     }
//     int TR=L/VR;
//     int TT=TR;//乌龟到达终点所用时间
//     for (int i = 0; i < N; i++) 
//     {
//         int time = max(0, p[i] - C) / VT1 + min(C, p[i]) / VT2 + T * i; // 乌龟到达该充电站的时间
//         // max(0, p[i] - C)计算乌龟从当前位置到充电站之间需要走的距离
//         // min(C, p[i]) / VT2乌龟在电动车行驶的情况下从当前位置到充电站所需的时间
//         // T * i充电时间
//         TT= min(TT, time);
//     }
//     if (TT< TR) 
//     {
//         cout << "What a pity rabbit!" << endl;
//     } 
//     else 
//     {
//         cout << "Good job, rabbit!" << endl;
//     }
//     return 0;
// }